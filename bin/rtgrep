#!/usr/bin/env ruby

require 'rbcurse/core/util/app'
require 'rtgrep'

$datacolor = $normalcolor = $def_fg_color = 238
$actual_bg_color = 16
$def_bg_color = $actual_bg_color + 0

module ColorMap
  class << self
    alias_method :original_get_color_const, :get_color_const
  end
  def ColorMap.get_color_const colorstring
    if [:black, "black", 0, nil].include?(colorstring)
      return $actual_bg_color
    else
      original_get_color_const(colorstring)
    end
  end
end

$log = Logger.new("/dev/null")
#$tlg = Logger.new("/home/bloopletech/tlg.log")

App.new do
  @default_prefix = " "

  searcher = Searcher.new
  ARGV.each { |a| searcher.add(a) }
  searcher.update

  stack :margin_top => 0, :width => :expand, :height => FFI::NCurses.LINES, :color => $normalcolor, :bgcolor => $actual_bg_color do
    results_box = SearcherList.new(nil, :list => searcher.search, :width => :expand, :height => FFI::NCurses.LINES - 2, :selection_mode => :single, :suppress_borders => true)
    _position(results_box)
    results_box.instance_variable_set("@display_length", FFI::NCurses.COLS)
    results_box.instance_variable_set("@internal_width", 0)
    results_box.cell_renderer(SearcherListCellRenderer.new(:display_length => results_box.width))

    label :text => " ", :width => :expand, :height => 1

    search_box = SearcherField.new(nil, :label => "Search >", :searcher_list => results_box)
    _position(search_box)
    field_width = FFI::NCurses.COLS - search_box.label.length - 2
    search_box.instance_variable_set("@display_length", field_width)
    search_box.instance_variable_set("@maxlen", field_width)

    exit_proc = proc do
      throw(:close)
    end

    search_box.bind(:CHANGE) do |event|
      results_box.list(searcher.search(search_box.getvalue))
      results_box.goto_top
      search_box.focus
      search_box.addcol(case event.type
      when :INSERT
        -1
      when :DELETE
        1
      else
        nil
      end)
    end

    search_box.bind_key(13) do
      selected_tag = results_box.current_value

      if selected_tag
        STDERR.print "#{selected_tag[3]}\n#{selected_tag[2]}\n#{selected_tag[4]}\n"
        STDERR.flush
      end

      exit_proc.call
    end

    search_box.bind_key(2727) do
      exit_proc.call
    end

    if ENV["RTGREP_TAGGER"]
      search_box.bind_key(FFI::NCurses::KEY_F5) do
        system("#{ENV["RTGREP_TAGGER"]} >/dev/null")
        searcher.update
        results_box.list(searcher.search(search_box.getvalue))
        search_box.fire_handler :CHANGE, InputDataEvent.new(nil, nil, nil, nil, nil, nil)
      end
    end

    @window.printstring(FFI::NCurses.LINES - 1, search_box.label.length, "  ", $actual_bg_color)
    results_box.goto_top
    search_box.focus
    search_box.cursor_home
  end
end
